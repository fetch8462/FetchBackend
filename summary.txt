1. I chose Python because of the powerful data manipulation capabilites and simplicity that come with it. Since the scope of the assignment was limited to a single 
user, these simple data structures built into Python like lists and dictionaries provided an easy and efficient way to store and retrieve data without over-
complicating the solution. I picked Flask as the framework because it was lightweight and perfectfly suited for the level of complexity for this small-sized API. It allowed me to quickly develop the RESTful endpoints to meet the assignment requirements with minimal setup and without excess work. For handling the timestamps,
I utilized Python's built in datetime library. This allowed me to compared timestamps easily and efficiently to ensure the transactions were sorted in 
chronological order. It spared me the need to use string manipulation as a means of handling dates and times. This utilization of these tools, libraries, and 
language in tandem was to me the most straightforward and efficient way of fufilling the assignments conditions.

2. Some advantages of my solution include the use of simple and efficient data structures like lists and dictionaries, which provide intuitive and quick access to 
transaction and balance data. The balances dictionary allows for constant-time lookups and updates for each payer, while the transactions list maintains 
chronological order of transactions, ensuring FIFO processing for spending points. Additionally, utilizing Python's built-in datetime librart simplifies the 
timestamp handling, reducing the risk of errors and improving code clarity. However, the solution has some disadvantages, such as the use of multiple loops, which 
increases my time complexity, particularly in the /spend endpoint where nested iterations over transactions and the response list can make the solution less 
scalable for large datasets. Lastly, storing data in memory limits the APIâ€™s usability to a single session, as all data is lost when the server restarts


3. My favorite personal project up to this point is my LeetCode Friends, a friend system for LeetCode that brings a social aspect to coding practice. With this 
project I was able to experience the entire software development pipeline, from idea generation to execution. This idea had sprouted from my time spent in my dorm 
with my fellow CS major roommate practicing LeetCode together. When trying to check his account, I had noticed a lack of community and social system within the 
website, eventually leading to the creation of my project. This system allows users to connect with friends, track each other's progress, and introduces 
accountability and motivation in your practice. My favorite feature to design and implement was LeetCode Battles, a real-time feature where users could compete 
head-to-head, solving problems side by side and seeing who could arrive at the correct and most optimal solution the fastest. The most challenging part of this project
was obtaining the necessary skills to bring my idea to life. While the concept in my head was clear, I had to learn various technologies and frameworks to make it a 
reality. This included designing a user-friendly interface, creating robust backend logic, and integrating real-time features. The process forced me to step out of 
my comfort zone and understand the foundational components needed for a full-stack project like this, from authentication to real-time data synchronization.


